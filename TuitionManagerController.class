package com.example.project3gui;

import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.CheckBox;
import javafx.scene.control.DatePicker;
import javafx.scene.control.RadioButton;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.ToggleGroup;
import javafx.scene.layout.AnchorPane;

import java.time.format.DateTimeFormatter;

public class TuitionManagerController {

    @FXML
    private TextField enrollDrop_credits;

    @FXML
    private AnchorPane enrollDrop_dob;

    @FXML
    private TextField enrollDrop_fname;

    @FXML
    private TextField enrollDrop_lname;

    @FXML
    private CheckBox isStudyAbroad;

    @FXML
    private ToggleGroup major;

    @FXML
    private TextArea messageArea;

    @FXML
    private ToggleGroup nonres_subgroup;

    @FXML
    private RadioButton rb_bait;

    @FXML
    private RadioButton rb_cs;

    @FXML
    private RadioButton rb_ct;

    @FXML
    private RadioButton rb_ece;

    @FXML
    private RadioButton rb_international;

    @FXML
    private RadioButton rb_iti;

    @FXML
    private RadioButton rb_math;

    @FXML
    private RadioButton rb_nonResident;

    @FXML
    private RadioButton rb_ny;

    @FXML
    private RadioButton rb_resident;

    @FXML
    private RadioButton rb_triState;

//    @FXML
//    private MenuItem semesterEnd;

    @FXML
    private ToggleGroup res_nonres;

    @FXML
    private TextField roster_creditCompleted;

    @FXML
    private DatePicker roster_dob;

    @FXML
    private TextField roster_fname;

    @FXML
    private TextField roster_lname;

    @FXML
    private TextField scholarship_amount;

    @FXML
    private DatePicker scholarship_dob;

    @FXML
    private TextField scholarship_fname;

    @FXML
    private TextField scholarship_lname;

    @FXML
    private ToggleGroup state;

    Roster roster = new Roster();
    Enrollment enrollment = new Enrollment();


    @FXML
    void add(ActionEvent event) {

        String fname = roster_fname.getText();
        String lname = roster_lname.getText();
        String date = roster_dob.getValue().format(DateTimeFormatter.ofPattern("MM/dd/yyyy"));
        Date dob = new Date(date);
        int creditCompleted = Integer.parseInt(roster_creditCompleted.getText());
        Profile profile = new Profile(lname,fname,dob);
        Major major;

        if(rb_bait.isSelected()){
            major = Major.BAIT;
        } else if (rb_cs.isSelected()) {
            major = Major.CS;
        } else if (rb_ece.isSelected()) {
            major = Major.EE;
        } else if (rb_iti.isSelected()) {
            major = Major.ITI;
        } else /* math */ {
            major = Major.MATH;
        }

        if(rb_resident.isSelected()){

            int scholarship = 0;
            Resident resident = new Resident(profile,major,creditCompleted,scholarship);
            if(roster.add(resident)) {
                messageArea.appendText(resident.toString() + " added to the roster\n");
            } else {
                messageArea.appendText(resident.toString() + " is already in the roster\n");
            }

        } else if (rb_nonResident.isSelected()) {

            NonResident nonResident = new NonResident(profile,major,creditCompleted);
            if(roster.add(nonResident)) {
                messageArea.appendText(nonResident.toString() + " added to the roster\n");
            } else {
                messageArea.appendText(nonResident.toString() + " is already in the roster\n");
            }

        } else if (rb_triState.isSelected()) {

            String state;
            if(rb_ny.isSelected()){
                state = "NY";
            } else {
                state = "CT";
            }
            TriState triState = new TriState(profile, major,creditCompleted,state);
            if(roster.add(triState)) {
                messageArea.appendText(triState.toString() + " added to the roster\n");
            } else {
                messageArea.appendText(triState.toString() + " is already in the roster\n");
            }

        } else /*international*/ {

            boolean studyAbroad;
            if(isStudyAbroad.isSelected()){
                studyAbroad = true;
            } else {
                studyAbroad = false;
            }
            International international = new International(profile,major,creditCompleted,studyAbroad);
            if(roster.add(international)) {
                messageArea.appendText(international.toString() + " added to the roster\n");
            } else {
                messageArea.appendText(international.toString() + " is already in the roster\n");
            }

        }

        roster_fname.setText("");
        roster_lname.setText("");
        roster_creditCompleted.setText("");
        roster_dob.setValue(null);

    }

    @FXML
    void changeMajor(ActionEvent event) {

        String fname = roster_fname.getText();
        String lname = roster_lname.getText();
        String date = roster_dob.getValue().format(DateTimeFormatter.ofPattern("MM/dd/yyyy"));
        Date dob = new Date(date);
        Profile profile = new Profile(lname,fname,dob);
        Resident pointer = new Resident(profile, Major.CS, 0, 0);

        Major major;
        if(rb_bait.isSelected()) {
            major = Major.BAIT;
        } else if(rb_cs.isSelected()) {
            major = Major.CS;
        } else if(rb_ece.isSelected()) {
            major = Major.EE;
        } else if(rb_iti.isSelected()) {
            major = Major.ITI;
        } else /*math*/ {
            major = Major.MATH;
        }

        if(roster.contains(pointer)){
            Student student = roster.getStudent(pointer);
            student.setMajor(major);
            messageArea.appendText(profile.toString() + " major changed to " + major.getName());
        } else {
            messageArea.appendText(profile.toString() + " not in the roster");
        }

        roster_fname.setText("");
        roster_lname.setText("");
        roster_creditCompleted.setText("");
        roster_dob.setValue(null);


    }

    @FXML
    void enroll(ActionEvent event) {

    }

    @FXML
    void enrollDrop_drop(ActionEvent event) {

    }

    @FXML
    void externalFile(ActionEvent event) {

    }

    @FXML
    void internationalButtonPress(ActionEvent event) {

        isStudyAbroad.setDisable(false);
        rb_ct.setDisable(true);
        rb_ny.setDisable(true);

        rb_ct.setSelected(false);
        rb_ny.setSelected(false);
        rb_nonResident.setSelected(false);

    }

    @FXML
    void nonResidentButtonPress(ActionEvent event) {

        rb_international.setDisable(false);
        rb_triState.setDisable(false);
        rb_ct.setDisable(true);
        rb_ny.setDisable(true);
        isStudyAbroad.setDisable(true);


        rb_international.setSelected(false);
        rb_triState.setSelected(false);
        rb_ct.setSelected(false);
        rb_ny.setSelected(false);
        isStudyAbroad.setSelected(false);

    }

    @FXML
    void printByProfile(ActionEvent event) {

    }

    @FXML
    void printBySchoolMajor(ActionEvent event) {

    }

    @FXML
    void printByStanding(ActionEvent event) {

    }

    @FXML
    void printEnrolledStudents(ActionEvent event) {

    }

    @FXML
    void printRBS(ActionEvent event) {

    }

    @FXML
    void printSAS(ActionEvent event) {

    }

    @FXML
    void printSCI(ActionEvent event) {

    }

    @FXML
    void printSOE(ActionEvent event) {

    }

    @FXML
    void printSemesterEnd(ActionEvent event) {



    }

    @FXML
    void printTuitionDue(ActionEvent event) {

    }

    @FXML
    void residentButtonPress(ActionEvent event) {

        rb_triState.setDisable(true);
        rb_international.setDisable(true);
        rb_ct.setDisable(true);
        rb_ny.setDisable(true);
        isStudyAbroad.setDisable(true);

        rb_triState.setSelected(false);
        rb_international.setSelected(false);
        rb_ct.setSelected(false);
        rb_ny.setSelected(false);
        isStudyAbroad.setSelected(false);
    }

    @FXML
    void roster_drop(ActionEvent event) {

        String fname = roster_fname.getText();
        String lname = roster_lname.getText();
        String date = roster_dob.getValue().format(DateTimeFormatter.ofPattern("MM/dd/yyyy"));
        Date dob = new Date(date);
        Profile profile = new Profile(lname,fname,dob);
        Resident pointer = new Resident(profile, Major.CS, 0,0);

        if(roster.remove(pointer)) {
            messageArea.appendText(profile.toString() + " removed from the roster\n");
        } else {
            messageArea.appendText(profile.toString() + " not in the roster\n");
        }

        roster_fname.setText("");
        roster_lname.setText("");
        roster_creditCompleted.setText("");
        roster_dob.setValue(null);



    }

    @FXML
    void triStateButtonPress(ActionEvent event) {

        rb_ct.setDisable(false);
        rb_ny.setDisable(false);
        isStudyAbroad.setDisable(true);

        isStudyAbroad.setSelected(false);
        rb_nonResident.setSelected(false);

        rb_ny.setSelected(true);

    }

    @FXML
    void updateScholarship(ActionEvent event) {

    }

}
